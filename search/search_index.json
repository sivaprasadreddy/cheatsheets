{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Welcome to My Quick Reference Cheatsheets My favorite development tools CommandLine Tools Babun - a Windows shell you will love!. iTerms2 - iTerm2 is a replacement for Terminal that works on Macs with macOS 10.8 or newer. Oh-My-Zsh - Your terminal never felt this good before. SdkMan - The Software Development Kit Manager. Editors Visual Studio Code Atom Sublime Text Task Tracking Tools Asana EverNote Trello Utilities Postman - REST Client Insomina - REST client Bitwarden - Password Manager SimpleMind - Mind Mapping tool GIF Brewery - Create GIFs Rambox - Messaging and emailing app that combines common web applications into one. Static Site Generators Hugo Jekyll MkDocs","title":"Home"},{"location":"#home","text":"Welcome to My Quick Reference Cheatsheets","title":"Home"},{"location":"#my-favorite-development-tools","text":"","title":"My favorite development tools"},{"location":"#commandline-tools","text":"Babun - a Windows shell you will love!. iTerms2 - iTerm2 is a replacement for Terminal that works on Macs with macOS 10.8 or newer. Oh-My-Zsh - Your terminal never felt this good before. SdkMan - The Software Development Kit Manager.","title":"CommandLine Tools"},{"location":"#editors","text":"Visual Studio Code Atom Sublime Text","title":"Editors"},{"location":"#task-tracking-tools","text":"Asana EverNote Trello","title":"Task Tracking Tools"},{"location":"#utilities","text":"Postman - REST Client Insomina - REST client Bitwarden - Password Manager SimpleMind - Mind Mapping tool GIF Brewery - Create GIFs Rambox - Messaging and emailing app that combines common web applications into one.","title":"Utilities"},{"location":"#static-site-generators","text":"Hugo Jekyll MkDocs","title":"Static Site Generators"},{"location":"learning/","text":"Learning General Programming Structure and Interpretation of Computer Programs Data Structures and Algorithms Algorithmic Thinking, Peak Finding Video Basic Steps to learn a programming language Introduction Installation Basics Data Structures File IO Exception Handling XML, JSON processing Working with SQL Databases Building Web Applications Building REST API","title":"Learning"},{"location":"learning/#learning","text":"","title":"Learning"},{"location":"learning/#general-programming","text":"Structure and Interpretation of Computer Programs","title":"General Programming"},{"location":"learning/#data-structures-and-algorithms","text":"Algorithmic Thinking, Peak Finding Video","title":"Data Structures and Algorithms"},{"location":"learning/#basic-steps-to-learn-a-programming-language","text":"Introduction Installation Basics Data Structures File IO Exception Handling XML, JSON processing Working with SQL Databases Building Web Applications Building REST API","title":"Basic Steps to learn a programming language"},{"location":"shortcuts/","text":"Shortcuts Intellij IDEA Extend Selection: \u2325 + \u2191 Shrink Selection: \u2325 + \u2193 Show clipboard: \u2318 + \u21e7 + V Format Current File: \u2325 + \u2318 + L Organize Imports: \u2303 + \u2325 + O Expand/Collapse Method: \u2318 + +/- Expand/Collapse all Methods: \u2318 + \u21e7 + +/- Extract to variable: \u2318 + \u2325 + V Extract to method: \u2318 + \u2325 + M File Structure: \u2318 + F12 Git Tips OhMyZsh Git CheatSheet Git Stash git status git stash -> only stash tracked files (indexed, modified files) git stash pop git stash apply -> reapply the changes to your working copy and keep them in your stash git stash -u -> also stash your untracked files git stash -a -> also stash your changes to ignored files git stash list git stash save \"add style to our site\" By default, git stash pop will re-apply the most recently created stash: stash@{0} git stash pop stash@{2} git stash branch branch-name stash@{1} git stash drop stash@{1} git stash clear http://sushihangover.github.io/iterm2-osx-jump-word-wise-left-and-right-in-navigation/ Working with open source git clone https://github.com/sivaprasadreddy/spring-boot.git cd spring-boot git remote add upstream https://github.com/spring-projects/spring-boot.git git remote -v git fetch upstream git checkout master git merge upstream/master git push Reset to Upstream ensures current branch is master \\$ git checkout master pulls all new commits made to upstream/master \\$ git pull upstream master this will delete all your local changes to master \\$ git reset --hard upstream/master take care, this will delete all your changes on your forked master \\$ git push origin master --force","title":"Shortcuts"},{"location":"shortcuts/#shortcuts","text":"","title":"Shortcuts"},{"location":"shortcuts/#intellij-idea","text":"Extend Selection: \u2325 + \u2191 Shrink Selection: \u2325 + \u2193 Show clipboard: \u2318 + \u21e7 + V Format Current File: \u2325 + \u2318 + L Organize Imports: \u2303 + \u2325 + O Expand/Collapse Method: \u2318 + +/- Expand/Collapse all Methods: \u2318 + \u21e7 + +/- Extract to variable: \u2318 + \u2325 + V Extract to method: \u2318 + \u2325 + M File Structure: \u2318 + F12","title":"Intellij IDEA"},{"location":"shortcuts/#git-tips","text":"OhMyZsh Git CheatSheet","title":"Git Tips"},{"location":"shortcuts/#git-stash","text":"git status git stash -> only stash tracked files (indexed, modified files) git stash pop git stash apply -> reapply the changes to your working copy and keep them in your stash git stash -u -> also stash your untracked files git stash -a -> also stash your changes to ignored files git stash list git stash save \"add style to our site\" By default, git stash pop will re-apply the most recently created stash: stash@{0} git stash pop stash@{2} git stash branch branch-name stash@{1} git stash drop stash@{1} git stash clear http://sushihangover.github.io/iterm2-osx-jump-word-wise-left-and-right-in-navigation/","title":"Git Stash"},{"location":"shortcuts/#working-with-open-source","text":"git clone https://github.com/sivaprasadreddy/spring-boot.git cd spring-boot git remote add upstream https://github.com/spring-projects/spring-boot.git git remote -v git fetch upstream git checkout master git merge upstream/master git push","title":"Working with open source"},{"location":"shortcuts/#reset-to-upstream","text":"ensures current branch is master \\$ git checkout master pulls all new commits made to upstream/master \\$ git pull upstream master this will delete all your local changes to master \\$ git reset --hard upstream/master take care, this will delete all your changes on your forked master \\$ git push origin master --force","title":"Reset to Upstream"},{"location":"devops/ansible/","text":"Installation Instructions: http://docs.ansible.com/ansible/latest/intro_installation.html Ubuntu sudo apt-get install software-properties-common sudo apt-add-repository ppa:ansible/ansible sudo apt-get update sudo apt-get install ansible MacOS sudo easy_install pip sudo pip install ansible Getting Started ansible --version vagrant init ubuntu/bionic64 vagrant up vagrant reload vagrant ssh vagrant ssh-config ssh vagrant@127.0.0.1 -p 2222 -i ./.vagrant/machines/default/virtualbox/private_key hosts file: testserver ansible_host=127.0.0.1 ansible_port=2222 ansible_user=vagrant ansible_private_key_file=.vagrant/machines/default/virtualbox/private_key ansible testserver -i hosts -m ping Ansible looks for an ansible.cfg file in the following places, in this order: File specified by the ANSIBLE_CONFIG environment variable ./ansible.cfg (ansible.cfg in the current directory) ~/.ansible.cfg (.ansible.cfg in your home directory) /etc/ansible/ansible.cfg ansible testserver -m command -a uptime ansible testserver -a uptime ansible testserver -a \"tail /var/log/dmesg\" to become root -b ansible testserver -b -a \"tail /var/log/syslog\" ansible testserver -b -m apt -a \"name=nginx update_cache=yes\" ansible testserver -b -m service -a \"name=nginx state=restarted\"","title":"Ansible"},{"location":"devops/ansible/#installation","text":"Instructions: http://docs.ansible.com/ansible/latest/intro_installation.html","title":"Installation"},{"location":"devops/ansible/#ubuntu","text":"sudo apt-get install software-properties-common sudo apt-add-repository ppa:ansible/ansible sudo apt-get update sudo apt-get install ansible","title":"Ubuntu"},{"location":"devops/ansible/#macos","text":"sudo easy_install pip sudo pip install ansible","title":"MacOS"},{"location":"devops/ansible/#getting-started","text":"ansible --version vagrant init ubuntu/bionic64 vagrant up vagrant reload vagrant ssh vagrant ssh-config ssh vagrant@127.0.0.1 -p 2222 -i ./.vagrant/machines/default/virtualbox/private_key hosts file: testserver ansible_host=127.0.0.1 ansible_port=2222 ansible_user=vagrant ansible_private_key_file=.vagrant/machines/default/virtualbox/private_key ansible testserver -i hosts -m ping Ansible looks for an ansible.cfg file in the following places, in this order: File specified by the ANSIBLE_CONFIG environment variable ./ansible.cfg (ansible.cfg in the current directory) ~/.ansible.cfg (.ansible.cfg in your home directory) /etc/ansible/ansible.cfg ansible testserver -m command -a uptime ansible testserver -a uptime ansible testserver -a \"tail /var/log/dmesg\"","title":"Getting Started"},{"location":"devops/ansible/#to-become-root-b","text":"ansible testserver -b -a \"tail /var/log/syslog\" ansible testserver -b -m apt -a \"name=nginx update_cache=yes\" ansible testserver -b -m service -a \"name=nginx state=restarted\"","title":"to become root -b"},{"location":"devops/devops/","text":"DevOps Tools Docker Docker Compose Vagrant - Development Environments Made Easy Ansible - AUTOMATION FOR EVERYONE Jenkins - Build great things at any scale Jenkinx-X - Jenkins X is a CI/CD solution for modern cloud applications on Kubernetes Kubernetes - Automating deployment, scaling, and management of containerized applications. Helm - The package manager for Kubernetes","title":"Tools"},{"location":"devops/devops/#devops","text":"","title":"DevOps"},{"location":"devops/devops/#tools","text":"Docker Docker Compose Vagrant - Development Environments Made Easy Ansible - AUTOMATION FOR EVERYONE Jenkins - Build great things at any scale Jenkinx-X - Jenkins X is a CI/CD solution for modern cloud applications on Kubernetes Kubernetes - Automating deployment, scaling, and management of containerized applications. Helm - The package manager for Kubernetes","title":"Tools"},{"location":"devops/docker/","text":"Docker Commands Docker basics Start a container in interactive attached mode: docker run -i -t ubuntu:16.04 /bin/bash Detach from a container: Ctrl + P Ctrl + Q Start a container in detached mode: docker run -d ubuntu:16.04 /bin/bash View logs of a container: docker logs ContainerId Start/Stop/Pause/Restart a container: docker start ContainerID docker stop ContainerID docker restart ContainerID docker pause ContainerID docker unpause ContainerID List running containers: docker ps List all containers: docker ps -a List only container ids: docker ps -aq List container ids not running: docker ps -aq -f status=exited Delete a container: docker rm containerId Delete all stopped containers: docker rm $(docker ps -aq status=exited) docker container prune Automatically remove container once stopped: docker run -i -t --rm ubuntu:16.04 /bin/bash Commit changes in a docker container: docker commit ContainerID username/repository Create Docker Image Build an image using Dockerfile: docker build -t sivaprasadreddy/myapp:1.0 . Build an image using different Dockerfile name: docker build -t busyboxplus:1.0 -f ./myfolder/MyDockerFile View layers of a container: docker history ContainerId Sample Dockerfile # A basic apache server. To use either add or bind mount content under /var/www FROM ubuntu : 12.04 LABEL maintainer = \"siva@mail.com\" RUN apt - get update && apt - get install - y apache2 && \\ apt - get clean && rm - rf / var / lib / apt / lists /* ENV APACHE_RUN_USER www - data ENV APACHE_RUN_GROUP www - data ENV APACHE_LOG_DIR / var / log / apache2 EXPOSE 80 CMD [ \"/usr/sbin/apache2\" , \"-D\" , \"FOREGROUND\" ] Docker Instructions FROM : The FROM instruction initializes a new build stage and sets the Base Image for subsequent instructions. FROM <image>[:<tag>|@<digest>] FROM ubuntu:latest COPY : The COPY instruction copies new files or directories from <src> and adds them to the filesystem of the container at the path <dest> . COPY <src> ... <dst> COPY html /var/www/html COPY httpd.conf magic /etc/httpd/conf/ ADD : The ADD instruction copies new files, directories or remote file URLs from <src> and adds them to the filesystem of the image at the path <dest> . ADD <src> ... <dst> ADD web-page-config.tar / ENV : The ENV instruction sets the environment variable <key> to the value <value> . ENV <key> <value> ENV DEBUG_LVL 3 ENV APACHE_LOG_DIR /var/log/apache WORKDIR : The WORKDIR instruction sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follow it in the Dockerfile. If the WORKDIR doesn\u2019t exist, it will be created even if it\u2019s not used in any subsequent Dockerfile instruction. WORKDIR <dirpath> WORKDIR /var/log EXPOSE : The EXPOSE instruction informs Docker that the container listens on the specified network ports at runtime. EXPOSE <port>[/<proto>] [<port>[/<proto>]...] EXPOSE 8080 8787 LABEL : The LABEL instruction adds metadata to an image. A LABEL is a key-value pair. LABEL <key-1>=<val-1> <key-2>=<val-2> ... <key-n>=<val-n> LABEL version=\"2.0\" release-date=\"2016-08-05\" RUN The RUN command executes during build time. RUN <command> (or) RUN [\"<exec>\", \"<arg-1>\", ..., \"<arg-n>\"] RUN echo \"echo Welcome to Docker!\" >> /root/.bashrc RUN [\"bash\", \"-c\", \"rm\", \"-rf\", \"/tmp/abc\"] CMD : The CMD is to provide defaults for an executing container and runs when container starts. There can only be one CMD instruction in a Dockerfile. If you list more than one CMD then only the last CMD will take effect. CMD <command> (or) CMD [\"<exec>\", \"<arg-1>\", ..., \"<arg-n>\"] (or) CMD [\"<arg-1>\", ..., \"<arg-n>\"] //Dockerfile to demonstrate the behavior of CMD FROM busybox:latest MAINTAINER Siva <sivaprasadreddy.k@gmail.com> CMD [\"echo\", \"Dockerfile CMD demo\"] > docker build -t cmd-demo . > sudo docker run cmd-demo Output : Dockerfile CMD demo > sudo docker run cmd-demo echo Override CMD demo Output : Override CMD demo ENTRYPOINT : An ENTRYPOINT allows you to configure a container that will run as an executable. ENTRYPOINT <command> (or) ENTRYPOINT [\"<exec>\", \"<arg-1>\", ..., \"<arg-n>\"] Only the last ENTRYPOINT instruction will be effective. //Dockerfile to demonstrate the behavior of ENTRYPOINT FROM busybox:latest ENTRYPOINT [\"echo\", \"Dockerfile ENTRYPOINT demo\"] > sudo docker build -t entrypoint-demo . > sudo docker run entrypoint-demo Output : Dockerfile ENTRYPOINT demo > sudo docker run entrypoint-demo with additional arguments Output : Dockerfile ENTRYPOINT demo with additional arguments > sudo docker run -it --entrypoint=\"/bin/sh\" entrypoint-demo Output : /# HEALTHCHECK : The HEALTHCHECK instruction tells Docker how to test a container to check that it is still working. HEALTHCHECK [<options>] CMD <command> Only the last HEALTHCHECK instruction will take effect. HEALTHCHECK --interval=5m --timeout=3s CMD curl -f http://localhost/ || exit 1 Push image to DockerHub $ docker images -a $ docker login Username: sivaprasadreddy Password: my_password docker push sivaprasadreddy/myapp Delete Image docker rmi sivaprasadreddy/myapp Docker cleanup Delete volumes docker volume rm $(docker volume ls -qf dangling=true) docker volume ls -qf dangling=true | xargs -r docker volume rm Delete networks docker network ls docker network ls | grep \"bridge\" docker network rm $(docker network ls | grep \"bridge\" | awk '/ / { print $1 }') docker network prune Remove docker images docker images docker rmi $(docker images -q) //delete all images docker rmi $(docker images --filter \"dangling=true\" -q --no-trunc) docker images | grep \"none\" docker rmi $(docker images | grep \"none\" | awk '/ / { print $3 }') Remove docker containers docker ps -a docker kill $(docker ps -q) docker rm $(docker ps -qa --no-trunc --filter \"status=exited\") Docker System Prune $ docker system prune -a WARNING! This will remove: - all stopped containers - all volumes not used by at least one container - all networks not used by at least one container - all images without at least one container associated to them Are you sure you want to continue ? [ y/N ] y Resize disk space for docker vm docker-machine create --driver virtualbox --virtualbox-disk-size \"40000\" default","title":"Docker"},{"location":"devops/docker/#docker-commands","text":"","title":"Docker Commands"},{"location":"devops/docker/#docker-basics","text":"Start a container in interactive attached mode: docker run -i -t ubuntu:16.04 /bin/bash Detach from a container: Ctrl + P Ctrl + Q Start a container in detached mode: docker run -d ubuntu:16.04 /bin/bash View logs of a container: docker logs ContainerId Start/Stop/Pause/Restart a container: docker start ContainerID docker stop ContainerID docker restart ContainerID docker pause ContainerID docker unpause ContainerID List running containers: docker ps List all containers: docker ps -a List only container ids: docker ps -aq List container ids not running: docker ps -aq -f status=exited Delete a container: docker rm containerId Delete all stopped containers: docker rm $(docker ps -aq status=exited) docker container prune Automatically remove container once stopped: docker run -i -t --rm ubuntu:16.04 /bin/bash Commit changes in a docker container: docker commit ContainerID username/repository","title":"Docker basics"},{"location":"devops/docker/#create-docker-image","text":"Build an image using Dockerfile: docker build -t sivaprasadreddy/myapp:1.0 . Build an image using different Dockerfile name: docker build -t busyboxplus:1.0 -f ./myfolder/MyDockerFile View layers of a container: docker history ContainerId Sample Dockerfile # A basic apache server. To use either add or bind mount content under /var/www FROM ubuntu : 12.04 LABEL maintainer = \"siva@mail.com\" RUN apt - get update && apt - get install - y apache2 && \\ apt - get clean && rm - rf / var / lib / apt / lists /* ENV APACHE_RUN_USER www - data ENV APACHE_RUN_GROUP www - data ENV APACHE_LOG_DIR / var / log / apache2 EXPOSE 80 CMD [ \"/usr/sbin/apache2\" , \"-D\" , \"FOREGROUND\" ]","title":"Create Docker Image"},{"location":"devops/docker/#docker-instructions","text":"FROM : The FROM instruction initializes a new build stage and sets the Base Image for subsequent instructions. FROM <image>[:<tag>|@<digest>] FROM ubuntu:latest COPY : The COPY instruction copies new files or directories from <src> and adds them to the filesystem of the container at the path <dest> . COPY <src> ... <dst> COPY html /var/www/html COPY httpd.conf magic /etc/httpd/conf/ ADD : The ADD instruction copies new files, directories or remote file URLs from <src> and adds them to the filesystem of the image at the path <dest> . ADD <src> ... <dst> ADD web-page-config.tar / ENV : The ENV instruction sets the environment variable <key> to the value <value> . ENV <key> <value> ENV DEBUG_LVL 3 ENV APACHE_LOG_DIR /var/log/apache WORKDIR : The WORKDIR instruction sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follow it in the Dockerfile. If the WORKDIR doesn\u2019t exist, it will be created even if it\u2019s not used in any subsequent Dockerfile instruction. WORKDIR <dirpath> WORKDIR /var/log EXPOSE : The EXPOSE instruction informs Docker that the container listens on the specified network ports at runtime. EXPOSE <port>[/<proto>] [<port>[/<proto>]...] EXPOSE 8080 8787 LABEL : The LABEL instruction adds metadata to an image. A LABEL is a key-value pair. LABEL <key-1>=<val-1> <key-2>=<val-2> ... <key-n>=<val-n> LABEL version=\"2.0\" release-date=\"2016-08-05\" RUN The RUN command executes during build time. RUN <command> (or) RUN [\"<exec>\", \"<arg-1>\", ..., \"<arg-n>\"] RUN echo \"echo Welcome to Docker!\" >> /root/.bashrc RUN [\"bash\", \"-c\", \"rm\", \"-rf\", \"/tmp/abc\"] CMD : The CMD is to provide defaults for an executing container and runs when container starts. There can only be one CMD instruction in a Dockerfile. If you list more than one CMD then only the last CMD will take effect. CMD <command> (or) CMD [\"<exec>\", \"<arg-1>\", ..., \"<arg-n>\"] (or) CMD [\"<arg-1>\", ..., \"<arg-n>\"] //Dockerfile to demonstrate the behavior of CMD FROM busybox:latest MAINTAINER Siva <sivaprasadreddy.k@gmail.com> CMD [\"echo\", \"Dockerfile CMD demo\"] > docker build -t cmd-demo . > sudo docker run cmd-demo Output : Dockerfile CMD demo > sudo docker run cmd-demo echo Override CMD demo Output : Override CMD demo ENTRYPOINT : An ENTRYPOINT allows you to configure a container that will run as an executable. ENTRYPOINT <command> (or) ENTRYPOINT [\"<exec>\", \"<arg-1>\", ..., \"<arg-n>\"] Only the last ENTRYPOINT instruction will be effective. //Dockerfile to demonstrate the behavior of ENTRYPOINT FROM busybox:latest ENTRYPOINT [\"echo\", \"Dockerfile ENTRYPOINT demo\"] > sudo docker build -t entrypoint-demo . > sudo docker run entrypoint-demo Output : Dockerfile ENTRYPOINT demo > sudo docker run entrypoint-demo with additional arguments Output : Dockerfile ENTRYPOINT demo with additional arguments > sudo docker run -it --entrypoint=\"/bin/sh\" entrypoint-demo Output : /# HEALTHCHECK : The HEALTHCHECK instruction tells Docker how to test a container to check that it is still working. HEALTHCHECK [<options>] CMD <command> Only the last HEALTHCHECK instruction will take effect. HEALTHCHECK --interval=5m --timeout=3s CMD curl -f http://localhost/ || exit 1 Push image to DockerHub $ docker images -a $ docker login Username: sivaprasadreddy Password: my_password docker push sivaprasadreddy/myapp Delete Image docker rmi sivaprasadreddy/myapp","title":"Docker Instructions"},{"location":"devops/docker/#docker-cleanup","text":"Delete volumes docker volume rm $(docker volume ls -qf dangling=true) docker volume ls -qf dangling=true | xargs -r docker volume rm Delete networks docker network ls docker network ls | grep \"bridge\" docker network rm $(docker network ls | grep \"bridge\" | awk '/ / { print $1 }') docker network prune Remove docker images docker images docker rmi $(docker images -q) //delete all images docker rmi $(docker images --filter \"dangling=true\" -q --no-trunc) docker images | grep \"none\" docker rmi $(docker images | grep \"none\" | awk '/ / { print $3 }') Remove docker containers docker ps -a docker kill $(docker ps -q) docker rm $(docker ps -qa --no-trunc --filter \"status=exited\") Docker System Prune $ docker system prune -a WARNING! This will remove: - all stopped containers - all volumes not used by at least one container - all networks not used by at least one container - all images without at least one container associated to them Are you sure you want to continue ? [ y/N ] y Resize disk space for docker vm docker-machine create --driver virtualbox --virtualbox-disk-size \"40000\" default","title":"Docker cleanup"},{"location":"devops/linux/","text":"Linux Commands The default prompt for regular user is $ and for root user is # Ex: [siva@siva-mint ~]$ [siva@siva-mint ~]# How to determine whether a given Linux is 32 bit or 64 bit? $ uname -m x86_64 ==> 64-bit kernel i686 ==> 32-bit kernel Show distribution info: $ uname -a Linux localhost.localdomain 4.5.7-300.fc24.x86_64 #1 SMP Wed Jun 8 18:12:45 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux Getting Help on commands: $ man pwd $ info pwd $ help pwd Go to home to home directory: $ cd ~ How much time it took to execute the command: $ time pwd To find out where a particular command is taken from: $ type bash bash is /bin/bash type command to check built-in or external command $ type pwd pwd is a shell builtin $ type bash bash is /bin/bash To see the executed command history: $ history To execute 23rd command: $ !23 To execute last command: $ !! To edit history command by number, opens in VI: $ fc 12 To runs the most recent command that contains a particular string of characters: $ !?string? To show current user: $ who am i siva pts/0 2016 -08-22 10 :26 ( 192 .168.56.1 ) $ grep siva /etc/passwd siva : x : 1000 : 1000 : Siva :/ home /siva:/bin/ bash $ hostname siva-centos7 ls command: $ ls -al $ ls --help $ ls --hide = Desktop $ date Mon Aug 22 10:33:50 IST 2016 $ date +'%d/%m/%y' 22/08/16 $ date +'%A, %B %d, %Y' Tuesday, October 21, 2014 date --help $ id uid=1000(siva) gid=1000(siva) groups=1000(siva),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023 See which users logged into the system currently $ who -uH NAME LINE TIME IDLE PID COMMENT siva :0 2016 -08-22 10 :11 ? 2575 ( :0 ) siva tty2 2016 -08-22 10 :12 00 :29 3443 siva pts/0 2016 -08-22 10 :26 . 3935 ( 192 .168.56.1 ) List all aliases: $ alias If a command is not in your PATH variable: $ locate chage Terminal shorcuts Alt + F => Word forward Go forward one word . Alt + B => Word backward Go backward one word . Ctrl + A => Beginning of line Go to the beginning of the current line . Ctrl + E => End of line Go to the end of the line . Ctrl + L => Clear screen Clear screen and leave line at the top of the screen . Alt + U => Uppercase word Change the current word to uppercase . Alt + L => Lowercase word Change the current word to lowercase . Alt + C => Capitalize word Change the current word to an initial capital Alias alias sai = 'sudo apt-get install' unalias sai For all users /etc/profile /etc/bashrc User specific config files ~/.bash_profile ~/.bashrc ~/.bash_logout To reload config file: $ source ~/.bashrc touch command $ touch memo { 1 ,2,3,4,5 } $ ls memo1 memo2 memo3 memo4 memo5 $ touch { John,Bill,Sally } - { Breakfast,Lunch,Dinner } $ ls Bill-Breakfast Bill-Lunch John-Dinner Sally-Breakfast Sally-Lunch Bill-Dinner John-Breakfast John-Lunch Sally-Dinner $ rm -f { John,Bill,Sally } - { Breakfast,Lunch,Dinner } $ touch { a..f }{ 1 ..5 } $ ls a1 a3 a5 b2 b4 c1 c3 c5 d2 d4 e1 e3 e5 f2 f4 a2 a4 b1 b3 b5 c2 c4 d1 d3 d5 e2 e4 f1 f3 f5 ls command $ ls -l total 4 -rw-rw-r--. 1 joe joe 0 Dec 18 13 :38 apple lrwxrwxrwx. 1 joe joe 5 Dec 18 13 :46 pointer_to_apple -> apple -rwxr-xr-x. 1 joe joe 0 Dec 18 13 :37 scriptx.sh To show hidden and non-hidden files:: $ ls -a To list all files by time most recently modified: $ ls -at To list files and append file-type indicators: $ ls -F $ ls --hide=g* $ ls -ld $HOME/test/ To list all files and directories recursively from current directory down: $ ls -R To list files by size: $ ls -S Permissions First character of permission: hyphen (-) : a regular file d : a directory l ( lowercase L) : a symbolic link b (for a block device) c (for a character device) s (for a socket) p (for a named pipe) x: an executable file (a script or binary file that runs as a command) Changing permissions with chmod (numbers) each permission (read, write, and execute) is assigned a number r=4, w=2, and x=1 For example, to make permissions wide open for yourself as owner, you would set the first number to 7 (4+2+1), and then you would give the group and others read-only permission by setting both the second and third numbers to 4 (4+0+0), so that the final number is 744. # chmod 777 file -> rwxrwxrwx # chmod 755 file -> rwxr-xr-x # chmod 644 file -> rw-r--r- # chmod 000 file -> --------- All files and directories below, and including, the myapps directory $ chmod -R 755 $HOME /myapps Changing permissions with chmod (letters) user (u), group (g), other (o),all users (a). read (r), write (w), and execute (x) Current : (rwxrwxrwx). $ chmod a-w file -> r-xr-xr-x $ chmod o-x file -> rwxrwxrw- $ chmod go-rwx file -> rwx------ Current: (---------). $ chmod u+rw files -> rw------- $ chmod a+x files -> --x--x--x $ chmod ug+rx files -> r-xr-x--- $ chmod -R o-w $HOME /myapps Changing file ownership # chown joe /home/joe/memo.txt # ls -l /home/joe/memo.txt -rw-r--r--. 1 joe root 0 Dec 19 11:23 /home/joe/memo.txt To change group as well # chown joe : joe / home / joe / memo . txt # ls - l / home / joe / memo . txt - rw - r --r--. 1 joe joe 0 Dec 19 11:23 /home/joe/memo.txt # chown - R joe : joe / media / myusb Moving, Copying, and Removing Files $ mv abc def $ mv abc ~ $ mv /home/joe/mymemos/ /home/joe/Documents/ $ cp abc def $ cp abc ~ $ cp -r /usr/share/doc/bash-completion* /tmp/a/ $ cp -ra /usr/share/doc/bash-completion* /tmp/b/ $ rm abc $ rm * $ rmdir /home/joe/nothing/ $ rm -r /home/joe/bigdir/ $ rm -rf /home/joe/hugedir/ The backslash causes any command to run unaliased. \\rm bigdir VIM 0 ( zero ) \u2014 Moves the cursor to the beginning of the current line . $ Moves the cursor to the end of the current line . ZZ \u2014 Saves the current changes to the file and exits from vi . : w \u2014 Saves the current file but doesn ' t exit from vi . : wq \u2014 Works the same as ZZ . : q \u2014 Quits the current file . This works only if you don \u2019 t have any unsaved changes . : q ! \u2014 Quits the current file and doesn \u2019 t save the changes you just made to the file . $ locate .bashrc /etc/skel/.bashrc /home/cnegus/.bashrc # locate .bashrc /etc/skel/.bashrc /home/bill/.bashrc /home/joe/.bashrc /root/.bashrc find command # find /etc -name passwd /etc/pam.d/passwd /etc/passwd # find /etc -iname '*passwd*' /etc/pam.d/passwd /etc/passwd- /etc/passwd.OLD /etc/passwd /etc/MYPASSWD /etc/security/opasswd Finding files by size $ find /usr/share/ -size +10M $ find /mostlybig -size -1M $ find /bigdata -size +500M -size -5G -exec du -sh {} \\; 4 .1G /bigdata/images/rhel6.img 606M /bigdata/Fedora-16-i686-Live-Desktop.iso 560M /bigdata/dance2.avi Finding files by user $ find /home -user chris -ls # find /home -user chris -or -user joe -ls # find /etc -group ntp -ls # find /var/spool -not -user root -ls Finding files by permission $ find /bin -perm 755 -ls $ find /home/chris/ -perm -222 -type d -ls $ find /myreadonly -perm +222 -type f $ find . -perm -002 -type f -ls Finding files by date and time changed in past 10 minutes: $ find /etc/ -mmin -10 changed in the past three days: $ find /bin /usr/bin /sbin /usr/sbin -ctime -3 have not been accessed in more than 300 days: $ find /var/ftp /var/www -atime +300 The time options (-atime, -ctime, and -mtime) based on the number of days The min options (-amin, -cmin, and -mmin) do the same in minutes. $ find /etc -iname iptables -exec echo \"I found {}\" \\; I found /etc/bash_completion.d/iptables I found /etc/sysconfig/iptables $ find /usr/share -size +5M -exec du {} \\; | sort -nr $ find /var/allusers/ -user joe -ok mv {} /tmp/joe/ \\; -ok asks for confirmation grep command $ grep desktop /etc/services $ grep -i desktop /etc/services To search for lines that don\u2019t contain a selected text string, use the -v option. $ grep -vi tcp /etc/services -r : recursively -l : list filenames only $ grep -rli peerdns /usr/share/doc/ $ ip addr show | grep inet SSH Password-less login Install OpenSSH on Server ex: sudo apt-get install openssh-server sudo service ssh restart (or) sudo systemctl start ssh On client machine, generate ssh keys ssh-keygen -t rsa Copy public key (id_rsa.pub) from client machine to server's authorized_keys. ssh-copy-id @ ssh-copy-id siva@192.168.0.103 Now you can ssh without requiring to enter password: ssh siva@192.168.0.103 Note: Check configuration of SSH server in /etc/ssh/sshd_config file.","title":"Linux"},{"location":"devops/linux/#linux-commands","text":"The default prompt for regular user is $ and for root user is # Ex: [siva@siva-mint ~]$ [siva@siva-mint ~]# How to determine whether a given Linux is 32 bit or 64 bit? $ uname -m x86_64 ==> 64-bit kernel i686 ==> 32-bit kernel Show distribution info: $ uname -a Linux localhost.localdomain 4.5.7-300.fc24.x86_64 #1 SMP Wed Jun 8 18:12:45 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux Getting Help on commands: $ man pwd $ info pwd $ help pwd Go to home to home directory: $ cd ~ How much time it took to execute the command: $ time pwd To find out where a particular command is taken from: $ type bash bash is /bin/bash type command to check built-in or external command $ type pwd pwd is a shell builtin $ type bash bash is /bin/bash To see the executed command history: $ history To execute 23rd command: $ !23 To execute last command: $ !! To edit history command by number, opens in VI: $ fc 12 To runs the most recent command that contains a particular string of characters: $ !?string? To show current user: $ who am i siva pts/0 2016 -08-22 10 :26 ( 192 .168.56.1 ) $ grep siva /etc/passwd siva : x : 1000 : 1000 : Siva :/ home /siva:/bin/ bash $ hostname siva-centos7 ls command: $ ls -al $ ls --help $ ls --hide = Desktop $ date Mon Aug 22 10:33:50 IST 2016 $ date +'%d/%m/%y' 22/08/16 $ date +'%A, %B %d, %Y' Tuesday, October 21, 2014 date --help $ id uid=1000(siva) gid=1000(siva) groups=1000(siva),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023 See which users logged into the system currently $ who -uH NAME LINE TIME IDLE PID COMMENT siva :0 2016 -08-22 10 :11 ? 2575 ( :0 ) siva tty2 2016 -08-22 10 :12 00 :29 3443 siva pts/0 2016 -08-22 10 :26 . 3935 ( 192 .168.56.1 ) List all aliases: $ alias If a command is not in your PATH variable: $ locate chage","title":"Linux Commands"},{"location":"devops/linux/#terminal-shorcuts","text":"Alt + F => Word forward Go forward one word . Alt + B => Word backward Go backward one word . Ctrl + A => Beginning of line Go to the beginning of the current line . Ctrl + E => End of line Go to the end of the line . Ctrl + L => Clear screen Clear screen and leave line at the top of the screen . Alt + U => Uppercase word Change the current word to uppercase . Alt + L => Lowercase word Change the current word to lowercase . Alt + C => Capitalize word Change the current word to an initial capital","title":"Terminal shorcuts"},{"location":"devops/linux/#alias","text":"alias sai = 'sudo apt-get install' unalias sai For all users /etc/profile /etc/bashrc User specific config files ~/.bash_profile ~/.bashrc ~/.bash_logout To reload config file: $ source ~/.bashrc","title":"Alias"},{"location":"devops/linux/#touch-command","text":"$ touch memo { 1 ,2,3,4,5 } $ ls memo1 memo2 memo3 memo4 memo5 $ touch { John,Bill,Sally } - { Breakfast,Lunch,Dinner } $ ls Bill-Breakfast Bill-Lunch John-Dinner Sally-Breakfast Sally-Lunch Bill-Dinner John-Breakfast John-Lunch Sally-Dinner $ rm -f { John,Bill,Sally } - { Breakfast,Lunch,Dinner } $ touch { a..f }{ 1 ..5 } $ ls a1 a3 a5 b2 b4 c1 c3 c5 d2 d4 e1 e3 e5 f2 f4 a2 a4 b1 b3 b5 c2 c4 d1 d3 d5 e2 e4 f1 f3 f5","title":"touch command"},{"location":"devops/linux/#ls-command","text":"$ ls -l total 4 -rw-rw-r--. 1 joe joe 0 Dec 18 13 :38 apple lrwxrwxrwx. 1 joe joe 5 Dec 18 13 :46 pointer_to_apple -> apple -rwxr-xr-x. 1 joe joe 0 Dec 18 13 :37 scriptx.sh To show hidden and non-hidden files:: $ ls -a To list all files by time most recently modified: $ ls -at To list files and append file-type indicators: $ ls -F $ ls --hide=g* $ ls -ld $HOME/test/ To list all files and directories recursively from current directory down: $ ls -R To list files by size: $ ls -S","title":"ls command"},{"location":"devops/linux/#permissions","text":"First character of permission: hyphen (-) : a regular file d : a directory l ( lowercase L) : a symbolic link b (for a block device) c (for a character device) s (for a socket) p (for a named pipe) x: an executable file (a script or binary file that runs as a command) Changing permissions with chmod (numbers) each permission (read, write, and execute) is assigned a number r=4, w=2, and x=1 For example, to make permissions wide open for yourself as owner, you would set the first number to 7 (4+2+1), and then you would give the group and others read-only permission by setting both the second and third numbers to 4 (4+0+0), so that the final number is 744. # chmod 777 file -> rwxrwxrwx # chmod 755 file -> rwxr-xr-x # chmod 644 file -> rw-r--r- # chmod 000 file -> --------- All files and directories below, and including, the myapps directory $ chmod -R 755 $HOME /myapps Changing permissions with chmod (letters) user (u), group (g), other (o),all users (a). read (r), write (w), and execute (x) Current : (rwxrwxrwx). $ chmod a-w file -> r-xr-xr-x $ chmod o-x file -> rwxrwxrw- $ chmod go-rwx file -> rwx------ Current: (---------). $ chmod u+rw files -> rw------- $ chmod a+x files -> --x--x--x $ chmod ug+rx files -> r-xr-x--- $ chmod -R o-w $HOME /myapps Changing file ownership # chown joe /home/joe/memo.txt # ls -l /home/joe/memo.txt -rw-r--r--. 1 joe root 0 Dec 19 11:23 /home/joe/memo.txt To change group as well # chown joe : joe / home / joe / memo . txt # ls - l / home / joe / memo . txt - rw - r --r--. 1 joe joe 0 Dec 19 11:23 /home/joe/memo.txt # chown - R joe : joe / media / myusb Moving, Copying, and Removing Files $ mv abc def $ mv abc ~ $ mv /home/joe/mymemos/ /home/joe/Documents/ $ cp abc def $ cp abc ~ $ cp -r /usr/share/doc/bash-completion* /tmp/a/ $ cp -ra /usr/share/doc/bash-completion* /tmp/b/ $ rm abc $ rm * $ rmdir /home/joe/nothing/ $ rm -r /home/joe/bigdir/ $ rm -rf /home/joe/hugedir/ The backslash causes any command to run unaliased. \\rm bigdir","title":"Permissions"},{"location":"devops/linux/#vim","text":"0 ( zero ) \u2014 Moves the cursor to the beginning of the current line . $ Moves the cursor to the end of the current line . ZZ \u2014 Saves the current changes to the file and exits from vi . : w \u2014 Saves the current file but doesn ' t exit from vi . : wq \u2014 Works the same as ZZ . : q \u2014 Quits the current file . This works only if you don \u2019 t have any unsaved changes . : q ! \u2014 Quits the current file and doesn \u2019 t save the changes you just made to the file . $ locate .bashrc /etc/skel/.bashrc /home/cnegus/.bashrc # locate .bashrc /etc/skel/.bashrc /home/bill/.bashrc /home/joe/.bashrc /root/.bashrc","title":"VIM"},{"location":"devops/linux/#find-command","text":"# find /etc -name passwd /etc/pam.d/passwd /etc/passwd # find /etc -iname '*passwd*' /etc/pam.d/passwd /etc/passwd- /etc/passwd.OLD /etc/passwd /etc/MYPASSWD /etc/security/opasswd Finding files by size $ find /usr/share/ -size +10M $ find /mostlybig -size -1M $ find /bigdata -size +500M -size -5G -exec du -sh {} \\; 4 .1G /bigdata/images/rhel6.img 606M /bigdata/Fedora-16-i686-Live-Desktop.iso 560M /bigdata/dance2.avi Finding files by user $ find /home -user chris -ls # find /home -user chris -or -user joe -ls # find /etc -group ntp -ls # find /var/spool -not -user root -ls Finding files by permission $ find /bin -perm 755 -ls $ find /home/chris/ -perm -222 -type d -ls $ find /myreadonly -perm +222 -type f $ find . -perm -002 -type f -ls Finding files by date and time changed in past 10 minutes: $ find /etc/ -mmin -10 changed in the past three days: $ find /bin /usr/bin /sbin /usr/sbin -ctime -3 have not been accessed in more than 300 days: $ find /var/ftp /var/www -atime +300 The time options (-atime, -ctime, and -mtime) based on the number of days The min options (-amin, -cmin, and -mmin) do the same in minutes. $ find /etc -iname iptables -exec echo \"I found {}\" \\; I found /etc/bash_completion.d/iptables I found /etc/sysconfig/iptables $ find /usr/share -size +5M -exec du {} \\; | sort -nr $ find /var/allusers/ -user joe -ok mv {} /tmp/joe/ \\; -ok asks for confirmation","title":"find command"},{"location":"devops/linux/#grep-command","text":"$ grep desktop /etc/services $ grep -i desktop /etc/services To search for lines that don\u2019t contain a selected text string, use the -v option. $ grep -vi tcp /etc/services -r : recursively -l : list filenames only $ grep -rli peerdns /usr/share/doc/ $ ip addr show | grep inet","title":"grep command"},{"location":"devops/linux/#ssh-password-less-login","text":"Install OpenSSH on Server ex: sudo apt-get install openssh-server sudo service ssh restart (or) sudo systemctl start ssh On client machine, generate ssh keys ssh-keygen -t rsa Copy public key (id_rsa.pub) from client machine to server's authorized_keys. ssh-copy-id @ ssh-copy-id siva@192.168.0.103 Now you can ssh without requiring to enter password: ssh siva@192.168.0.103 Note: Check configuration of SSH server in /etc/ssh/sshd_config file.","title":"SSH Password-less login"},{"location":"golang/golang/","text":"Go Tutorial Installation We can go to https://golang.org/dl/ and download the binary depending on our Operating System and install it. Once installed run go version and you should be able to see the go version. $ go version go version go1.14.1 darwin/amd64 $ Once go is installed set GOPATH environment variable. On MacOS by default it is set to ${user.home}/go . We can also add $GOPATH/bin to our PATH . $ export GOPATH = ~/go $ export PATH = $PATH : $GOPATH /bin Quickstart Create New Project Create a new project directory hello-go and cd into the directory: $ mkdir hello-go & cd hello-go In hello-go directory create hello.go as follows: hello.go package main import \"fmt\" func main () { fmt . Println ( \"Hello World!!!\" ) } Now you can run the application using go run hello.go and build the application as executable binary using go build as follows: hello-go> go run hello.go Hello World!!! hello-go> go build hello-go> ls hello hello.go hello-go> ./hello Hello World!!! We can initialize the hello-go application as a module using go mod init command as follows: hello-go> go mod init github.com/sivaprasadreddy/hello-go go: creating new go.mod: module github.com/sivaprasadreddy/hello-go hello-go> cat go.mod module github.com/sivaprasadreddy/hello-go go 1 .14 hello-go> We can install 3rd-party dependencies using go get command as follows: hello-go> go get -u github.com/mitchellh/go-homedir hello-go> cat go.mod module github.com/sivaprasadreddy/hello-go go 1 .14 require github.com/mitchellh/go-homedir v1.1.0 // indirect hello-go> We can use homedir module as follows: hello.go package main import ( \"fmt\" \"github.com/mitchellh/go-homedir\" \"os\" ) func main () { fmt . Println ( \"Hello World!!!\" ) home , err := homedir . Dir () if err != nil { fmt . Println ( \"Error: \" , err ) os . Exit ( 1 ) } fmt . Println ( \"My Home directory: \" , home ) }","title":"Go"},{"location":"golang/golang/#go-tutorial","text":"","title":"Go Tutorial"},{"location":"golang/golang/#installation","text":"We can go to https://golang.org/dl/ and download the binary depending on our Operating System and install it. Once installed run go version and you should be able to see the go version. $ go version go version go1.14.1 darwin/amd64 $ Once go is installed set GOPATH environment variable. On MacOS by default it is set to ${user.home}/go . We can also add $GOPATH/bin to our PATH . $ export GOPATH = ~/go $ export PATH = $PATH : $GOPATH /bin","title":"Installation"},{"location":"golang/golang/#quickstart","text":"","title":"Quickstart"},{"location":"golang/golang/#create-new-project","text":"Create a new project directory hello-go and cd into the directory: $ mkdir hello-go & cd hello-go In hello-go directory create hello.go as follows: hello.go package main import \"fmt\" func main () { fmt . Println ( \"Hello World!!!\" ) } Now you can run the application using go run hello.go and build the application as executable binary using go build as follows: hello-go> go run hello.go Hello World!!! hello-go> go build hello-go> ls hello hello.go hello-go> ./hello Hello World!!! We can initialize the hello-go application as a module using go mod init command as follows: hello-go> go mod init github.com/sivaprasadreddy/hello-go go: creating new go.mod: module github.com/sivaprasadreddy/hello-go hello-go> cat go.mod module github.com/sivaprasadreddy/hello-go go 1 .14 hello-go> We can install 3rd-party dependencies using go get command as follows: hello-go> go get -u github.com/mitchellh/go-homedir hello-go> cat go.mod module github.com/sivaprasadreddy/hello-go go 1 .14 require github.com/mitchellh/go-homedir v1.1.0 // indirect hello-go> We can use homedir module as follows: hello.go package main import ( \"fmt\" \"github.com/mitchellh/go-homedir\" \"os\" ) func main () { fmt . Println ( \"Hello World!!!\" ) home , err := homedir . Dir () if err != nil { fmt . Println ( \"Error: \" , err ) os . Exit ( 1 ) } fmt . Println ( \"My Home directory: \" , home ) }","title":"Create New Project"},{"location":"java/ecosystem/","text":"Java Java is a popular general purpose programming language. Installation Easy way to install Java is using SDKMAN $ curl -s \"https://get.sdkman.io\" | bash $ source \" $HOME /.sdkman/bin/sdkman-init.sh\" $ sdk version $ sdk list java $ sdk install java 11 .0.2-open IDEs Intellij IDEA Eclipse Spring Tool Suite NetBeans Java Libraries and Tools Lombok AutoValue Immutable objects Jasypt JJwt Jackson JSON Vavr FF4j Failsafe Retry4j Twitter4j JooQ FlexyPool Hibernate-Types Resilience4j Zalando/problem-spring-web SpringFox Testing JUnit 5 Docs REST Assured Mock Server TestContainers Mockito Assertj Awaitility Localstack Jacoco SonarQube SonarCloud Performace Testinng Gatling JMeter Database Migration Flyway DB Migration Liquibase CI/CD Jenkins TravisCI CircleCI Monitoring Grafana Prometheus ELK Stack References https://www.oracle.com/technetwork/java/javase/downloads/index.html https://www.reddit.com/r/java","title":"Ecosystem"},{"location":"java/ecosystem/#java","text":"Java is a popular general purpose programming language.","title":"Java"},{"location":"java/ecosystem/#installation","text":"Easy way to install Java is using SDKMAN $ curl -s \"https://get.sdkman.io\" | bash $ source \" $HOME /.sdkman/bin/sdkman-init.sh\" $ sdk version $ sdk list java $ sdk install java 11 .0.2-open","title":"Installation"},{"location":"java/ecosystem/#ides","text":"Intellij IDEA Eclipse Spring Tool Suite NetBeans","title":"IDEs"},{"location":"java/ecosystem/#java-libraries-and-tools","text":"Lombok AutoValue Immutable objects Jasypt JJwt Jackson JSON Vavr FF4j Failsafe Retry4j Twitter4j JooQ FlexyPool Hibernate-Types Resilience4j Zalando/problem-spring-web SpringFox","title":"Java Libraries and Tools"},{"location":"java/ecosystem/#testing","text":"JUnit 5 Docs REST Assured Mock Server TestContainers Mockito Assertj Awaitility Localstack Jacoco SonarQube SonarCloud","title":"Testing"},{"location":"java/ecosystem/#performace-testinng","text":"Gatling JMeter","title":"Performace Testinng"},{"location":"java/ecosystem/#database-migration","text":"Flyway DB Migration Liquibase","title":"Database Migration"},{"location":"java/ecosystem/#cicd","text":"Jenkins TravisCI CircleCI","title":"CI/CD"},{"location":"java/ecosystem/#monitoring","text":"Grafana Prometheus ELK Stack","title":"Monitoring"},{"location":"java/ecosystem/#references","text":"https://www.oracle.com/technetwork/java/javase/downloads/index.html https://www.reddit.com/r/java","title":"References"},{"location":"java/gradle/","text":"Gradle Gradle is a powerful build tool. Installation sdk install gradle References https://gradle.org/guides/#getting-started https://docs.gradle.org/current/userguide/userguide.html","title":"Gradle"},{"location":"java/gradle/#gradle","text":"Gradle is a powerful build tool.","title":"Gradle"},{"location":"java/gradle/#installation","text":"sdk install gradle","title":"Installation"},{"location":"java/gradle/#references","text":"https://gradle.org/guides/#getting-started https://docs.gradle.org/current/userguide/userguide.html","title":"References"},{"location":"java/maven/","text":"Maven Install artifacts into local repository mvn install:install-file -DgroupId=oracle -DartifactId=ojdbc14 -Dpackaging=jar -Dversion=1.0 -Dfile=ojdbc14.jar -DgeneratePom=true Commonly used Plugins spring-boot-maven-plugin https://docs.spring.io/spring-boot/docs/current/maven-plugin/index.html <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> <version> 2.1.3.RELEASE </version> <configuration> <mainClass> ${start-class} </mainClass> <classifier> exec </classifier> </configuration> <executions> <execution> <goals> <goal> repackage </goal> </goals> </execution> <execution> <goals> <goal> build-info </goal> </goals> </execution> </executions> </plugin> kotlin-maven-plugin https://kotlinlang.org/docs/reference/using-maven.html <build> <plugins> <plugin> <groupId> org.jetbrains.kotlin </groupId> <artifactId> kotlin-maven-plugin </artifactId> <version> ${kotlin.version} </version> <executions> <execution> <id> compile </id> <goals> <goal> compile </goal> </goals> <configuration> <sourceDirs> <sourceDir> ${project.basedir}/src/main/kotlin </sourceDir> <sourceDir> ${project.basedir}/src/main/java </sourceDir> </sourceDirs> </configuration> </execution> <execution> <id> test-compile </id> <goals> <goal> test-compile </goal> </goals> <configuration> <sourceDirs> <sourceDir> ${project.basedir}/src/test/kotlin </sourceDir> <sourceDir> ${project.basedir}/src/test/java </sourceDir> </sourceDirs> </configuration> </execution> </executions> </plugin> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-compiler-plugin </artifactId> <version> 3.5.1 </version> <executions> <!-- Replacing default-compile as it is treated specially by maven --> <execution> <id> default-compile </id> <phase> none </phase> </execution> <!-- Replacing default-testCompile as it is treated specially by maven --> <execution> <id> default-testCompile </id> <phase> none </phase> </execution> <execution> <id> java-compile </id> <phase> compile </phase> <goals> <goal> compile </goal> </goals> </execution> <execution> <id> java-test-compile </id> <phase> test-compile </phase> <goals> <goal> testCompile </goal> </goals> </execution> </executions> </plugin> </plugins> </build> maven-surefire-plugin https://maven.apache.org/surefire/maven-surefire-plugin/ <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-surefire-plugin </artifactId> <version> 3.0.0-M3 </version> <configuration> <excludes> <exclude> **/*IntegrationTest.class </exclude> </excludes> </configuration> </plugin> maven-failsafe-plugin https://maven.apache.org/surefire/maven-failsafe-plugin/ <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-failsafe-plugin </artifactId> <version> 3.0.0-M3 </version> <configuration> <includes> <include> **/*IntegrationTest.class </include> </includes> </configuration> </plugin> jacoco-maven-plugin https://www.eclemma.org/jacoco/trunk/doc/maven.html <project> <properties> <jacoco.destFile> ${project.build.directory}/coverage-reports/aggregate.exec </jacoco.destFile> </properties> <plugin> <groupId> org.jacoco </groupId> <artifactId> jacoco-maven-plugin </artifactId> <version> 0.8.3 </version> <configuration> <dataFile> ${project.build.directory}/coverage-reports/aggregate.exec </dataFile> <rules> <rule implementation= \"org.jacoco.maven.RuleConfiguration\" > <element> BUNDLE </element> <limits> <limit implementation= \"org.jacoco.report.check.Limit\" > <counter> COMPLEXITY </counter> <value> COVEREDRATIO </value> <minimum> 0.40 </minimum> </limit> </limits> </rule> </rules> <excludes> <exclude> **/model/* </exclude> <exclude> **/entity/* </exclude> <exclude> **/config/* </exclude> </excludes> </configuration> <executions> <execution> <id> default-prepare-agent </id> <goals> <goal> prepare-agent </goal> </goals> <configuration> <destFile> ${project.build.directory}/coverage-reports/jacoco-ut.exec </destFile> </configuration> </execution> <execution> <id> default-prepare-agent-integration </id> <goals> <goal> prepare-agent-integration </goal> </goals> <configuration> <destFile> ${project.build.directory}/coverage-reports/jacoco-it.exec </destFile> </configuration> </execution> <execution> <id> post-unit-test </id> <phase> prepare-package </phase> <goals> <goal> report </goal> </goals> <configuration> <dataFile> ${project.build.directory}/coverage-reports/jacoco-ut.exec </dataFile> <outputDirectory> ${project.reporting.outputDirectory}/jacoco-ut </outputDirectory> </configuration> </execution> <execution> <id> post-integration-test </id> <phase> post-integration-test </phase> <goals> <goal> report </goal> </goals> <configuration> <dataFile> ${project.build.directory}/coverage-reports/jacoco-it.exec </dataFile> <outputDirectory> ${project.reporting.outputDirectory}/jacoco-it </outputDirectory> </configuration> </execution> <execution> <id> merge-results </id> <phase> verify </phase> <goals> <goal> merge </goal> </goals> <configuration> <fileSets> <fileSet> <directory> ${project.build.directory}/coverage-reports </directory> <includes> <include> *.exec </include> </includes> </fileSet> </fileSets> <destFile> ${project.build.directory}/coverage-reports/aggregate.exec </destFile> </configuration> </execution> <execution> <id> post-merge-report </id> <phase> verify </phase> <goals> <goal> report </goal> </goals> <configuration> <dataFile> ${project.build.directory}/coverage-reports/aggregate.exec </dataFile> <outputDirectory> ${project.reporting.outputDirectory}/jacoco-aggregate </outputDirectory> </configuration> </execution> <execution> <id> check </id> <goals> <goal> check </goal> </goals> </execution> </executions> </plugin> </project> dependency-check-maven https://jeremylong.github.io/DependencyCheck/index.html <plugin> <groupId> org.owasp </groupId> <artifactId> dependency-check-maven </artifactId> <version> 3.3.2 </version> <configuration> <failOnError> false </failOnError> </configuration> <executions> <execution> <phase> deploy </phase> <goals> <goal> check </goal> </goals> </execution> </executions> </plugin> maven-dependency-versions-check-plugin https://github.com/ning/maven-dependency-versions-check-plugin <plugin> <groupId> com.ning.maven.plugins </groupId> <artifactId> maven-dependency-versions-check-plugin </artifactId> <version> 2.0.4 </version> <configuration> <skip> false </skip> <failBuildInCaseOfConflict> false </failBuildInCaseOfConflict> <warnIfMajorVersionIsHigher> true </warnIfMajorVersionIsHigher> </configuration> <executions> <execution> <phase> verify </phase> <goals> <goal> check </goal> </goals> </execution> </executions> </plugin> flyway-maven-plugin https://flywaydb.org/documentation/maven/ <project> <properties> <flyway.url> jdbc:postgresql://localhost:5432/postgres </flyway.url> <flyway.user> postgres </flyway.user> <flyway.password> secret </flyway.password> </properties> <plugin> <groupId> org.flywaydb </groupId> <artifactId> flyway-maven-plugin </artifactId> <configuration> <driver> org.postgresql.Driver </driver> <url> ${flyway.url} </url> <user> ${flyway.user} </user> <password> ${flyway.password} </password> <schemas> <schema> public </schema> </schemas> <locations> <location> classpath:/db/migration/postgresql </location> </locations> </configuration> </plugin> </project> maven-antrun-plugin http://maven.apache.org/plugins/maven-antrun-plugin/ <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-antrun-plugin </artifactId> <version> 1.8 </version> <executions> <execution> <id> ktlint </id> <phase> verify </phase> <configuration> <target name= \"ktlint\" > <java taskname= \"ktlint\" dir= \"${basedir}\" fork= \"true\" failonerror= \"false\" classpathref= \"maven.plugin.classpath\" classname= \"com.github.shyiko.ktlint.Main\" > <arg value= \"src/**/*.kt\" /> <!-- to generate report in checkstyle format prepend following args: --> <arg value= \"--reporter=plain\" /> <arg value= \"--reporter=checkstyle,output=${project.build.directory}/ktlint.xml\" /> <!-- see https://github.com/shyiko/ktlint#usage for more --> </java> </target> </configuration> <goals><goal> run </goal></goals> </execution> <execution> <id> ktlint-format </id> <phase> validate </phase> <configuration> <target name= \"ktlint\" > <java taskname= \"ktlint\" dir= \"${basedir}\" fork= \"true\" failonerror= \"false\" classpathref= \"maven.plugin.classpath\" classname= \"com.github.shyiko.ktlint.Main\" > <arg value= \"-F\" /> <arg value= \"src/**/*.kt\" /> </java> </target> </configuration> <goals><goal> run </goal></goals> </execution> </executions> <dependencies> <dependency> <groupId> com.github.shyiko </groupId> <artifactId> ktlint </artifactId> <version> 0.29.0 </version> </dependency> <!-- additional 3rd party ruleset(s) can be specified here --> </dependencies> </plugin> detekt-maven-plugin https://github.com/Ozsie/detekt-maven-plugin <plugin> <groupId> com.github.ozsie </groupId> <artifactId> detekt-maven-plugin </artifactId> <version> 1.0.0.RC9.2 </version> <executions> <execution> <phase> verify </phase> <goals><goal> check </goal></goals> </execution> </executions> </plugin> maven-resources-plugin https://maven.apache.org/plugins/maven-resources-plugin/ <plugin> <artifactId> maven-resources-plugin </artifactId> <executions> <execution> <id> copy frontend content </id> <phase> generate-resources </phase> <goals> <goal> copy-resources </goal> </goals> <configuration> <outputDirectory> ${project.build.directory}/classes/static </outputDirectory> <overwrite> true </overwrite> <resources> <resource> <directory> ${project.basedir}/../frontend/dist </directory> <includes> <include> static/ </include> <include> index.html </include> <include> favicon.ico </include> </includes> </resource> </resources> </configuration> </execution> </executions> </plugin> Sonar Maven Plugin https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Maven <propject> <properties> <sonar.jdbc.url> jdbc:mysql://localhost:3306/sonar </sonar.jdbc.url> <sonar.jdbc.username> sonar </sonar.jdbc.username> <sonar.jdbc.password> sonar </sonar.jdbc.password> <sonar.host.url> http://localhost:9000 </sonar.host.url> <sonar.host.url> https://sonarcloud.io </sonar.host.url> <sonar.organization> sivaprasadreddy-github </sonar.organization> </properties> <plugin> <groupId> org.sonarsource.scanner.maven </groupId> <artifactId> sonar-maven-plugin </artifactId> <version> 3.5.0.1254 </version> <executions> <execution> <phase> verify </phase> <goals> <goal> sonar </goal> </goals> </execution> </executions> </plugin> </propject> mvn clean verify sonar:sonar docker-maven-plugin https://github.com/fabric8io/docker-maven-plugin <plugin> <groupId> io.fabric8 </groupId> <artifactId> docker-maven-plugin </artifactId> <version> 0.24.0 </version> <configuration> <logStdout> true </logStdout> <images> <image> <name> postgres:10.3 </name> <alias> postgresdb </alias> <run> <env> <POSTGRES_DB> mydb </POSTGRES_DB> <POSTGRES_USER> siva </POSTGRES_USER> <POSTGRES_PASSWORD> secret </POSTGRES_PASSWORD> </env> <ports> <port> 5432 </port> </ports> <wait> <log> database system is ready to accept connections </log> <time> 30000 </time> </wait> </run> </image> <image> <name> jamesdbloom/mockserver:mockserver-4.1.0 </name> <alias> mockserver </alias> <run> <ports> <port> 1080 </port> </ports> <wait> <log> MockServer started </log> <time> 30000 </time> </wait> </run> </image> </images> </configuration> <executions> <execution> <id> start-dependencies </id> <phase> pre-integration-test </phase> <goals> <goal> start </goal> </goals> </execution> <execution> <id> stop-dependencies </id> <phase> post-integration-test </phase> <goals> <goal> stop </goal> <goal> remove </goal> </goals> </execution> </executions> </plugin> git-commit-id-plugin <plugin> <groupId> pl.project13.maven </groupId> <artifactId> git-commit-id-plugin </artifactId> <version> 2.2.2 </version> <executions> <execution> <goals> <goal> revision </goal> </goals> </execution> </executions> <configuration> <dateFormat> yyyy-MM-dd'T'HH:mm:ssZ </dateFormat> <generateGitPropertiesFile> true </generateGitPropertiesFile> </configuration> </plugin> maven-javadoc-plugin <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-javadoc-plugin </artifactId> <configuration> <sourceFileExcludes> <exclude> **/generated/** </exclude> </sourceFileExcludes> </configuration> <executions> <execution> <id> attach-javadocs </id> <phase> package </phase> <goals> <goal> jar </goal> </goals> </execution> </executions> </plugin> maven-enforcer-plugin https://maven.apache.org/enforcer/maven-enforcer-plugin/ maven-compiler-plugin protobuf-maven-plugin build-helper-maven-plugin properties-maven-plugin jooq-codegen-maven maven-checkstyle-plugin exec-maven-plugin","title":"Maven"},{"location":"java/maven/#maven","text":"","title":"Maven"},{"location":"java/maven/#install-artifacts-into-local-repository","text":"mvn install:install-file -DgroupId=oracle -DartifactId=ojdbc14 -Dpackaging=jar -Dversion=1.0 -Dfile=ojdbc14.jar -DgeneratePom=true","title":"Install artifacts into local repository"},{"location":"java/maven/#commonly-used-plugins","text":"","title":"Commonly used Plugins"},{"location":"java/maven/#spring-boot-maven-plugin","text":"https://docs.spring.io/spring-boot/docs/current/maven-plugin/index.html <plugin> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-maven-plugin </artifactId> <version> 2.1.3.RELEASE </version> <configuration> <mainClass> ${start-class} </mainClass> <classifier> exec </classifier> </configuration> <executions> <execution> <goals> <goal> repackage </goal> </goals> </execution> <execution> <goals> <goal> build-info </goal> </goals> </execution> </executions> </plugin>","title":"spring-boot-maven-plugin"},{"location":"java/maven/#kotlin-maven-plugin","text":"https://kotlinlang.org/docs/reference/using-maven.html <build> <plugins> <plugin> <groupId> org.jetbrains.kotlin </groupId> <artifactId> kotlin-maven-plugin </artifactId> <version> ${kotlin.version} </version> <executions> <execution> <id> compile </id> <goals> <goal> compile </goal> </goals> <configuration> <sourceDirs> <sourceDir> ${project.basedir}/src/main/kotlin </sourceDir> <sourceDir> ${project.basedir}/src/main/java </sourceDir> </sourceDirs> </configuration> </execution> <execution> <id> test-compile </id> <goals> <goal> test-compile </goal> </goals> <configuration> <sourceDirs> <sourceDir> ${project.basedir}/src/test/kotlin </sourceDir> <sourceDir> ${project.basedir}/src/test/java </sourceDir> </sourceDirs> </configuration> </execution> </executions> </plugin> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-compiler-plugin </artifactId> <version> 3.5.1 </version> <executions> <!-- Replacing default-compile as it is treated specially by maven --> <execution> <id> default-compile </id> <phase> none </phase> </execution> <!-- Replacing default-testCompile as it is treated specially by maven --> <execution> <id> default-testCompile </id> <phase> none </phase> </execution> <execution> <id> java-compile </id> <phase> compile </phase> <goals> <goal> compile </goal> </goals> </execution> <execution> <id> java-test-compile </id> <phase> test-compile </phase> <goals> <goal> testCompile </goal> </goals> </execution> </executions> </plugin> </plugins> </build>","title":"kotlin-maven-plugin"},{"location":"java/maven/#maven-surefire-plugin","text":"https://maven.apache.org/surefire/maven-surefire-plugin/ <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-surefire-plugin </artifactId> <version> 3.0.0-M3 </version> <configuration> <excludes> <exclude> **/*IntegrationTest.class </exclude> </excludes> </configuration> </plugin>","title":"maven-surefire-plugin"},{"location":"java/maven/#maven-failsafe-plugin","text":"https://maven.apache.org/surefire/maven-failsafe-plugin/ <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-failsafe-plugin </artifactId> <version> 3.0.0-M3 </version> <configuration> <includes> <include> **/*IntegrationTest.class </include> </includes> </configuration> </plugin>","title":"maven-failsafe-plugin"},{"location":"java/maven/#jacoco-maven-plugin","text":"https://www.eclemma.org/jacoco/trunk/doc/maven.html <project> <properties> <jacoco.destFile> ${project.build.directory}/coverage-reports/aggregate.exec </jacoco.destFile> </properties> <plugin> <groupId> org.jacoco </groupId> <artifactId> jacoco-maven-plugin </artifactId> <version> 0.8.3 </version> <configuration> <dataFile> ${project.build.directory}/coverage-reports/aggregate.exec </dataFile> <rules> <rule implementation= \"org.jacoco.maven.RuleConfiguration\" > <element> BUNDLE </element> <limits> <limit implementation= \"org.jacoco.report.check.Limit\" > <counter> COMPLEXITY </counter> <value> COVEREDRATIO </value> <minimum> 0.40 </minimum> </limit> </limits> </rule> </rules> <excludes> <exclude> **/model/* </exclude> <exclude> **/entity/* </exclude> <exclude> **/config/* </exclude> </excludes> </configuration> <executions> <execution> <id> default-prepare-agent </id> <goals> <goal> prepare-agent </goal> </goals> <configuration> <destFile> ${project.build.directory}/coverage-reports/jacoco-ut.exec </destFile> </configuration> </execution> <execution> <id> default-prepare-agent-integration </id> <goals> <goal> prepare-agent-integration </goal> </goals> <configuration> <destFile> ${project.build.directory}/coverage-reports/jacoco-it.exec </destFile> </configuration> </execution> <execution> <id> post-unit-test </id> <phase> prepare-package </phase> <goals> <goal> report </goal> </goals> <configuration> <dataFile> ${project.build.directory}/coverage-reports/jacoco-ut.exec </dataFile> <outputDirectory> ${project.reporting.outputDirectory}/jacoco-ut </outputDirectory> </configuration> </execution> <execution> <id> post-integration-test </id> <phase> post-integration-test </phase> <goals> <goal> report </goal> </goals> <configuration> <dataFile> ${project.build.directory}/coverage-reports/jacoco-it.exec </dataFile> <outputDirectory> ${project.reporting.outputDirectory}/jacoco-it </outputDirectory> </configuration> </execution> <execution> <id> merge-results </id> <phase> verify </phase> <goals> <goal> merge </goal> </goals> <configuration> <fileSets> <fileSet> <directory> ${project.build.directory}/coverage-reports </directory> <includes> <include> *.exec </include> </includes> </fileSet> </fileSets> <destFile> ${project.build.directory}/coverage-reports/aggregate.exec </destFile> </configuration> </execution> <execution> <id> post-merge-report </id> <phase> verify </phase> <goals> <goal> report </goal> </goals> <configuration> <dataFile> ${project.build.directory}/coverage-reports/aggregate.exec </dataFile> <outputDirectory> ${project.reporting.outputDirectory}/jacoco-aggregate </outputDirectory> </configuration> </execution> <execution> <id> check </id> <goals> <goal> check </goal> </goals> </execution> </executions> </plugin> </project>","title":"jacoco-maven-plugin"},{"location":"java/maven/#dependency-check-maven","text":"https://jeremylong.github.io/DependencyCheck/index.html <plugin> <groupId> org.owasp </groupId> <artifactId> dependency-check-maven </artifactId> <version> 3.3.2 </version> <configuration> <failOnError> false </failOnError> </configuration> <executions> <execution> <phase> deploy </phase> <goals> <goal> check </goal> </goals> </execution> </executions> </plugin>","title":"dependency-check-maven"},{"location":"java/maven/#maven-dependency-versions-check-plugin","text":"https://github.com/ning/maven-dependency-versions-check-plugin <plugin> <groupId> com.ning.maven.plugins </groupId> <artifactId> maven-dependency-versions-check-plugin </artifactId> <version> 2.0.4 </version> <configuration> <skip> false </skip> <failBuildInCaseOfConflict> false </failBuildInCaseOfConflict> <warnIfMajorVersionIsHigher> true </warnIfMajorVersionIsHigher> </configuration> <executions> <execution> <phase> verify </phase> <goals> <goal> check </goal> </goals> </execution> </executions> </plugin>","title":"maven-dependency-versions-check-plugin"},{"location":"java/maven/#flyway-maven-plugin","text":"https://flywaydb.org/documentation/maven/ <project> <properties> <flyway.url> jdbc:postgresql://localhost:5432/postgres </flyway.url> <flyway.user> postgres </flyway.user> <flyway.password> secret </flyway.password> </properties> <plugin> <groupId> org.flywaydb </groupId> <artifactId> flyway-maven-plugin </artifactId> <configuration> <driver> org.postgresql.Driver </driver> <url> ${flyway.url} </url> <user> ${flyway.user} </user> <password> ${flyway.password} </password> <schemas> <schema> public </schema> </schemas> <locations> <location> classpath:/db/migration/postgresql </location> </locations> </configuration> </plugin> </project>","title":"flyway-maven-plugin"},{"location":"java/maven/#maven-antrun-plugin","text":"http://maven.apache.org/plugins/maven-antrun-plugin/ <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-antrun-plugin </artifactId> <version> 1.8 </version> <executions> <execution> <id> ktlint </id> <phase> verify </phase> <configuration> <target name= \"ktlint\" > <java taskname= \"ktlint\" dir= \"${basedir}\" fork= \"true\" failonerror= \"false\" classpathref= \"maven.plugin.classpath\" classname= \"com.github.shyiko.ktlint.Main\" > <arg value= \"src/**/*.kt\" /> <!-- to generate report in checkstyle format prepend following args: --> <arg value= \"--reporter=plain\" /> <arg value= \"--reporter=checkstyle,output=${project.build.directory}/ktlint.xml\" /> <!-- see https://github.com/shyiko/ktlint#usage for more --> </java> </target> </configuration> <goals><goal> run </goal></goals> </execution> <execution> <id> ktlint-format </id> <phase> validate </phase> <configuration> <target name= \"ktlint\" > <java taskname= \"ktlint\" dir= \"${basedir}\" fork= \"true\" failonerror= \"false\" classpathref= \"maven.plugin.classpath\" classname= \"com.github.shyiko.ktlint.Main\" > <arg value= \"-F\" /> <arg value= \"src/**/*.kt\" /> </java> </target> </configuration> <goals><goal> run </goal></goals> </execution> </executions> <dependencies> <dependency> <groupId> com.github.shyiko </groupId> <artifactId> ktlint </artifactId> <version> 0.29.0 </version> </dependency> <!-- additional 3rd party ruleset(s) can be specified here --> </dependencies> </plugin>","title":"maven-antrun-plugin"},{"location":"java/maven/#detekt-maven-plugin","text":"https://github.com/Ozsie/detekt-maven-plugin <plugin> <groupId> com.github.ozsie </groupId> <artifactId> detekt-maven-plugin </artifactId> <version> 1.0.0.RC9.2 </version> <executions> <execution> <phase> verify </phase> <goals><goal> check </goal></goals> </execution> </executions> </plugin>","title":"detekt-maven-plugin"},{"location":"java/maven/#maven-resources-plugin","text":"https://maven.apache.org/plugins/maven-resources-plugin/ <plugin> <artifactId> maven-resources-plugin </artifactId> <executions> <execution> <id> copy frontend content </id> <phase> generate-resources </phase> <goals> <goal> copy-resources </goal> </goals> <configuration> <outputDirectory> ${project.build.directory}/classes/static </outputDirectory> <overwrite> true </overwrite> <resources> <resource> <directory> ${project.basedir}/../frontend/dist </directory> <includes> <include> static/ </include> <include> index.html </include> <include> favicon.ico </include> </includes> </resource> </resources> </configuration> </execution> </executions> </plugin>","title":"maven-resources-plugin"},{"location":"java/maven/#sonar-maven-plugin","text":"https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Maven <propject> <properties> <sonar.jdbc.url> jdbc:mysql://localhost:3306/sonar </sonar.jdbc.url> <sonar.jdbc.username> sonar </sonar.jdbc.username> <sonar.jdbc.password> sonar </sonar.jdbc.password> <sonar.host.url> http://localhost:9000 </sonar.host.url> <sonar.host.url> https://sonarcloud.io </sonar.host.url> <sonar.organization> sivaprasadreddy-github </sonar.organization> </properties> <plugin> <groupId> org.sonarsource.scanner.maven </groupId> <artifactId> sonar-maven-plugin </artifactId> <version> 3.5.0.1254 </version> <executions> <execution> <phase> verify </phase> <goals> <goal> sonar </goal> </goals> </execution> </executions> </plugin> </propject> mvn clean verify sonar:sonar","title":"Sonar Maven Plugin"},{"location":"java/maven/#docker-maven-plugin","text":"https://github.com/fabric8io/docker-maven-plugin <plugin> <groupId> io.fabric8 </groupId> <artifactId> docker-maven-plugin </artifactId> <version> 0.24.0 </version> <configuration> <logStdout> true </logStdout> <images> <image> <name> postgres:10.3 </name> <alias> postgresdb </alias> <run> <env> <POSTGRES_DB> mydb </POSTGRES_DB> <POSTGRES_USER> siva </POSTGRES_USER> <POSTGRES_PASSWORD> secret </POSTGRES_PASSWORD> </env> <ports> <port> 5432 </port> </ports> <wait> <log> database system is ready to accept connections </log> <time> 30000 </time> </wait> </run> </image> <image> <name> jamesdbloom/mockserver:mockserver-4.1.0 </name> <alias> mockserver </alias> <run> <ports> <port> 1080 </port> </ports> <wait> <log> MockServer started </log> <time> 30000 </time> </wait> </run> </image> </images> </configuration> <executions> <execution> <id> start-dependencies </id> <phase> pre-integration-test </phase> <goals> <goal> start </goal> </goals> </execution> <execution> <id> stop-dependencies </id> <phase> post-integration-test </phase> <goals> <goal> stop </goal> <goal> remove </goal> </goals> </execution> </executions> </plugin>","title":"docker-maven-plugin"},{"location":"java/maven/#git-commit-id-plugin","text":"<plugin> <groupId> pl.project13.maven </groupId> <artifactId> git-commit-id-plugin </artifactId> <version> 2.2.2 </version> <executions> <execution> <goals> <goal> revision </goal> </goals> </execution> </executions> <configuration> <dateFormat> yyyy-MM-dd'T'HH:mm:ssZ </dateFormat> <generateGitPropertiesFile> true </generateGitPropertiesFile> </configuration> </plugin>","title":"git-commit-id-plugin"},{"location":"java/maven/#maven-javadoc-plugin","text":"<plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-javadoc-plugin </artifactId> <configuration> <sourceFileExcludes> <exclude> **/generated/** </exclude> </sourceFileExcludes> </configuration> <executions> <execution> <id> attach-javadocs </id> <phase> package </phase> <goals> <goal> jar </goal> </goals> </execution> </executions> </plugin>","title":"maven-javadoc-plugin"},{"location":"java/maven/#maven-enforcer-plugin","text":"https://maven.apache.org/enforcer/maven-enforcer-plugin/","title":"maven-enforcer-plugin"},{"location":"java/maven/#maven-compiler-plugin","text":"","title":"maven-compiler-plugin"},{"location":"java/maven/#protobuf-maven-plugin","text":"","title":"protobuf-maven-plugin"},{"location":"java/maven/#build-helper-maven-plugin","text":"","title":"build-helper-maven-plugin"},{"location":"java/maven/#properties-maven-plugin","text":"","title":"properties-maven-plugin"},{"location":"java/maven/#jooq-codegen-maven","text":"","title":"jooq-codegen-maven"},{"location":"java/maven/#maven-checkstyle-plugin","text":"","title":"maven-checkstyle-plugin"},{"location":"java/maven/#exec-maven-plugin","text":"","title":"exec-maven-plugin"},{"location":"kotlin/introduction/","text":"Kotlin Kotlin is a JVM based programming language created by JetBrains. Build Tool Configuration Configure Kotlin using Maven Configure Kotlin using Gradle Libraries/Frameworks Ktor MockK References https://kotlinlang.org/docs/reference/ https://www.reddit.com/r/kotlin https://github.com/KotlinBy/awesome-kotlin http://www.kotlintoday.com/","title":"Introduction"},{"location":"kotlin/introduction/#kotlin","text":"Kotlin is a JVM based programming language created by JetBrains.","title":"Kotlin"},{"location":"kotlin/introduction/#build-tool-configuration","text":"Configure Kotlin using Maven Configure Kotlin using Gradle","title":"Build Tool Configuration"},{"location":"kotlin/introduction/#librariesframeworks","text":"Ktor MockK","title":"Libraries/Frameworks"},{"location":"kotlin/introduction/#references","text":"https://kotlinlang.org/docs/reference/ https://www.reddit.com/r/kotlin https://github.com/KotlinBy/awesome-kotlin http://www.kotlintoday.com/","title":"References"},{"location":"misc/clean-architecture/","text":"Thought on Clean Architecture Layered architecture What is Layered Architecture? Advantages Simple, commonly used Challenges Chances of becoming tangled mess Not very explicit about code intention Clean Architecture What is Clean Architecture? Advantages More maintainable in the long run Ability to switch frameworks without changing core domain Challenges More code to write and maintain May not use frameworks features in easier way Questions to ask ourselves Is clean architecture suitable for all type of applications? Is your application has heavy business logic? How many types of clients your application have? Do we need Framework independence? My preferred approach (middle ground) Package-by-feature instead of Package-by-layer Explicit configuration or framework magic Use-cases vs Services Domain model vs database model Domain logic vs Business rules Database entities and DTOs References http://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html https://medium.freecodecamp.org/a-quick-introduction-to-clean-architecture-990c014448d2 https://www.oreilly.com/ideas/software-architecture-patterns/page/2/layered-architecture https://towardsdatascience.com/software-architecture-patterns-98043af8028 https://gist.github.com/ygrenzinger/14812a56b9221c9feca0b3621518635b","title":"CleanArchitecture"},{"location":"misc/clean-architecture/#thought-on-clean-architecture","text":"","title":"Thought on Clean Architecture"},{"location":"misc/clean-architecture/#layered-architecture","text":"What is Layered Architecture? Advantages Simple, commonly used Challenges Chances of becoming tangled mess Not very explicit about code intention","title":"Layered architecture"},{"location":"misc/clean-architecture/#clean-architecture","text":"What is Clean Architecture? Advantages More maintainable in the long run Ability to switch frameworks without changing core domain Challenges More code to write and maintain May not use frameworks features in easier way","title":"Clean Architecture"},{"location":"misc/clean-architecture/#questions-to-ask-ourselves","text":"Is clean architecture suitable for all type of applications? Is your application has heavy business logic? How many types of clients your application have? Do we need Framework independence?","title":"Questions to ask ourselves"},{"location":"misc/clean-architecture/#my-preferred-approach-middle-ground","text":"Package-by-feature instead of Package-by-layer Explicit configuration or framework magic Use-cases vs Services Domain model vs database model Domain logic vs Business rules Database entities and DTOs","title":"My preferred approach (middle ground)"},{"location":"misc/clean-architecture/#references","text":"http://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html https://medium.freecodecamp.org/a-quick-introduction-to-clean-architecture-990c014448d2 https://www.oreilly.com/ideas/software-architecture-patterns/page/2/layered-architecture https://towardsdatascience.com/software-architecture-patterns-98043af8028 https://gist.github.com/ygrenzinger/14812a56b9221c9feca0b3621518635b","title":"References"},{"location":"python/installation/","text":"Installation","title":"Installation"},{"location":"python/installation/#installation","text":"","title":"Installation"},{"location":"python/introduction/","text":"Introduction","title":"Introduction"},{"location":"python/introduction/#introduction","text":"","title":"Introduction"},{"location":"ruby/ruby/","text":"Ruby Tutorial Installation","title":"Ruby"},{"location":"ruby/ruby/#ruby-tutorial","text":"","title":"Ruby Tutorial"},{"location":"ruby/ruby/#installation","text":"","title":"Installation"},{"location":"springboot/introduction/","text":"SpringBoot References https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/ https://github.com/spring-projects/spring-boot https://github.com/spring-io/start.spring.io https://github.com/spring-io/initializr","title":"Introduction"},{"location":"springboot/introduction/#springboot","text":"","title":"SpringBoot"},{"location":"springboot/introduction/#references","text":"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/ https://github.com/spring-projects/spring-boot https://github.com/spring-io/start.spring.io https://github.com/spring-io/initializr","title":"References"},{"location":"typescript/typescript/","text":"TypeScript Tutorial Installation: npm install -g typescript HelloWorld hello.ts function greeter ( person ) { return \"Hello, \" + person ; } let user = \"Jane User\" ; document . body . textContent = greeter ( user ); tsc greeter.ts -> compile let hello = \"Hello!\"; let isDone: boolean = false; let color: string = \"blue\"; let age: number = 37; let sentence: string = Hello, my name is ${ fullName }. I'll be ${ age + 1 } years old next month. ; let list: number[] = [1, 2, 3]; let list: Array = [1, 2, 3]; const numLivesForCat = 9; let input = [1, 2]; let [first, second] = input;","title":"TypeScript"},{"location":"typescript/typescript/#typescript-tutorial","text":"Installation: npm install -g typescript HelloWorld hello.ts function greeter ( person ) { return \"Hello, \" + person ; } let user = \"Jane User\" ; document . body . textContent = greeter ( user ); tsc greeter.ts -> compile let hello = \"Hello!\"; let isDone: boolean = false; let color: string = \"blue\"; let age: number = 37; let sentence: string = Hello, my name is ${ fullName }. I'll be ${ age + 1 } years old next month. ; let list: number[] = [1, 2, 3]; let list: Array = [1, 2, 3]; const numLivesForCat = 9; let input = [1, 2]; let [first, second] = input;","title":"TypeScript Tutorial"}]}